(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{662:function(t,s,a){"use strict";a.r(s);var r=a(1),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"git线上操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git线上操作"}},[t._v("#")]),t._v(" git线上操作")]),t._v(" "),a("h3",{attrs:{id:"二-与github-gitee协同使用-git代码托管服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-与github-gitee协同使用-git代码托管服务器"}},[t._v("#")]),t._v(" 二.与github/gitee协同使用（git代码托管服务器）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("和GitHub相比，码云（Gitee）也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务，5人以下小团队免费。")])]),t._v(" "),a("li",[a("p",[t._v("1.配置远程仓库免密登陆")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）在用户主目录下，看看有没有"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh目录，如果有，再看看这个目录下有没有 id_rsa和 id_rsa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SSH")]),t._v(" Key： ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("keygen "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("t rsa "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" xxx@foxmail.com "')]),t._v("\n备注：一路回车，执行生成 id_rsa 私钥 和 id_rsa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pub 公钥，Windows用户在git bash中输入上述指令\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）获得key的内容，复制下来，添加到gitHub的"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SSH")]),t._v(" key中\nwindows位置：‪"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\\Users\\用户名\\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh\\id_rsa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pub\nLinux位置：cat "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ssh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("id_rsa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pub\n\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("） ssh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" git@github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com #验证key，根据提示输入yes，添加为信任主机\n或者 ssh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" git@git"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("oschina"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("net\n")])])]),a("ul",[a("li",[t._v("2.添加远程仓库")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git remote add origin https"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git（https方式）\n（ssh方式）\n此处可以为https地址也可以是ssh地址，orign为设置的远程仓库的别名，强烈建议使用ssh方式，因为https方式每次都要输入用户名和密码\n如果需要修改传输协议：\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("） git remote rm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("（ 删除远程仓库）\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("） 设置传输方式和目标远程仓库\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("） git push "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n码云的添加远程仓库方法：\ngit remote add origin git@gitee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git（ssh方式）\n如果git remote add失败，并报错：fatal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" remote origin already exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n说明本地库已经关联了一个名叫origin的远程库，此时，可以先用git remote "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v查看远程库信息：\norigin git@github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin git@github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n表示本地库已经关联了Github上的origin远程库，需要先删除已有的Github库：\ngit remote remove origin\n再关联码云的远程库（注意路径中需要填写正确的用户名）：\ngit remote add gitee git@gitee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n\n因为git本身是分布式版本控制系统，可以同步到另外一个远程库，当然也可以同步到另外两个远程库，所以 一个本地库可以既关联GitHub，又关联码云！\n使用多个远程库时，要注意git给远程库起的默认名称是origin，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。仍然以learngit本地库为例，先删除已关联的名为origin的远程库：\ngit remote rm origin\n然后，先关联GitHub的远程库：\ngit remote add github git@github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n注意，远程库的名称叫github，不叫origin了。\n接着，再关联码云的远程库：\ngit remote add gitee git@gitee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n同样注意，远程库的名称叫gitee，不叫origin。\n现在，我们用 git remote "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v查看远程库信息，可以看到两个远程库：gitee git@gitee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngitee git@gitee"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngithub git@github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngithub git@github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n如果要推送到GitHub，使用命令：\ngit push github master\n如果要推送到码云，使用命令：\ngit push gitee master\n这样一来，本地库就可以同时与多个远程库互相同步：\n")])])]),a("ul",[a("li",[t._v("3.查看远程仓库及传输协议")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git remote\ngit remote "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v 查看名称和详细地址\n")])])]),a("ul",[a("li",[t._v("4.删除远程仓库")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git remote remove "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("ul",[a("li",[t._v("5.推送本地分支到远程仓库")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git push "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n如果省略远程分支名，则表示将本地分支推送与之存在“追踪关系”的远程分支（通常两者同名）， 如果该远程分支不存在，则会被新建 。\ngit push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\ngit push origin master\n如果当前分支与多个主机存在追踪关系，则可以使用"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u选项指定一个默认主机，这样以后就可以不加任何参数使用git push。\ngit push "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 例如：git push "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u origin master\n")])])]),a("ul",[a("li",[t._v("6.将远程仓库克隆为本地仓库")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git clone git@github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n注意：\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）不能使用别名\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）默认情况下， 从远程clone到本地的库只能看到master分支 ，如果要将远程的分支同步到本地：\ngit checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n前提是远程"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("必须存在名为"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("的分支，而且"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("和"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("最好一致。\n")])])]),a("ul",[a("li",[t._v("7.本地仓库更新")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("将远程存储库中的更改合并到当前分支中。在默认模式下， git pull是 git fetch后跟 git merge "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FETCH_HEAD")]),t._v("的缩写。更准确地说，git pull使用给定的参数运行git fetch，并调用git merge将检索到的分支头合并到当前分支中。 使用"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("rebase，它运行git rebase而不是git merge。\n以下是一些示例：\ngit pull "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n比如，要取回origin主机的next分支，与本地的master分支合并，需要写成下面这样 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\ngit pull origin next"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("如果远程分支")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("要与当前分支合并，则冒号后面的部分可以省略。上面命令可以简写为：\ngit pull origin next\n上面命令表示，取回origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("next分支，再与当前分支合并。实质上，这等同于先做git fetch，再执行git merge。\ngit fetch "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("origin")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" git merge origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("next\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tracking"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动“追踪”origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("master分支。Git也允许手动建立追踪关系：\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("upstream"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n比如git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("upstream"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("to"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("next master，指定master分支追踪origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("next分支。\ngit pull origin\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("上面命令表示，本地当前分支自动与对应的origin主机”追踪分支”")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("remote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("tracking branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("进行合并。\n如果当前分支只有一个追踪分支，连远程主机名都可以省略。\ngit pull\n上面命令表示，当前分支自动与唯一一个追踪分支进行合并。\n如果合并需要采用rebase模式，可以使用–rebase选项。\ngit pull "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("rebase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\ngit fetch和git pull的区别\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("） git fetch：相当于是从远程获取最新版本到本地，不会自动合并。\ngit fetch origin mastergit log "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mastergit merge origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("master\n以上命令的含义：\n首先从远程的origin的master主分支下载最新的版本到origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("master分支上\n然后比较本地的master分支和origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("master分支的差别\n最后进行合并\n上述过程其实可以用以下更清晰的方式来进行：\ngit fetch origin master"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("tmpgit diff tmp git merge tmp\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("） git pull：相当于是从远程获取最新版本并merge到本地\ngit pull origin master\n上述命令其实相当于git fetch 和 git merge\n在实际使用中，git fetch更安全一些，因为在merge前，可以查看更新情况，然后再决定是否合并。\n")])])]),a("ul",[a("li",[t._v("8.查看分支")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git branch\n")])])]),a("ul",[a("li",[t._v("9.创建分支")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("ul",[a("li",[t._v("10.创建并切换到分支")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n备注：git checkout命令加上"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b参数表示创建并切换，相当于以下两条命令\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("ul",[a("li",[t._v("11.切换分支")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n切换分支后，在git bash中显示为绿色\n")])])]),a("ul",[a("li",[t._v("12.删除分支")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n如果分支没有合并，删除分支就表示会丢失修改，此时git无法使用"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d删除，可使用"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("强行删除\ngit branch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("ul",[a("li",[t._v("13.合并分支")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git合并默认使用Fast forward模式，一旦删除分支，会丢掉分支信息 ，也就看不出来曾经做过合并\ngit merge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" #基于当前分支，合并另外一个分支，前提需要保证分支之间不冲突\n如果强制禁用Fast forward模式，即普通模式，Git就会在merge时生成一个新的commit\ngit merge "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("no"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ff "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"there is a comment"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n因为本次合并要创建一个新的commit，所以加上"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m参数，把commit描述写进去。\n工作中，肯定需要不管有没有分支被删除，都要从分支历史上就查看所有的历史分支信息，所以要使用普通模式合并。\n")])])]),a("ul",[a("li",[t._v("14.创建tag")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("） git tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" #默认在"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("版本\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("） 对指定的commit版本创建tag\n需要先找到历史commit的id\ngit log "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("abbrev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("commit\n然后对指定的commit创建tag：\ngit tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commitid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("）创建 带有说明的tag，用"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a指定标签名，"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m指定说明文字\ngit tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"there is a tag description"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commitid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("）通过"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s 用私钥签名一个标签，签名采用"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PGP")]),t._v("签名\ngit tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"there is a tag description"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commitid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错，参考GnuPG帮助文档配置Key。\n")])])]),a("ul",[a("li",[t._v("15.查看tag")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git tag #显示的tag不是按时间顺序排列，而是按字母顺序排列\n如果想查看tag和commit的对应关系，可以用\ngit log "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("pretty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("abbrev"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("commit\n如果想查看tag的的详细情况，可以用\ngit show "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("ul",[a("li",[t._v("16.删除tag")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在 本地安全删除：\ngit tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n如果标签已经推送到远程，要 删除远程标签就麻烦一点：\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）先本地删除： git tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）再远程删除： git push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("refs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("tags"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("ul",[a("li",[t._v("17.推送标签至远程")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tagname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n或者，一次性推送全部尚未推送到远程的本地标签：\ngit push origin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("tags\n")])])]),a("ul",[a("li",[t._v("18.现场的保存与恢复")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git stash #将目前的工作现场保存\ngit stash list #查看所有保存的工作现场\n工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：\n一是用 git stash apply stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("恢复，但是恢复后，stash内容并不删除，你需要用 git stash drop stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("来删除；\n另一种方式是用 git stash pop，恢复的同时把stash内容也删了，这种方式省时省力\n注意点：\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）如果在分支下新建文件，而尚未执行add操作，stash无法将新文件纳入保存的现场，因为stash只对 被修改的被追踪的文件和 暂存的变更有效， 对于新文件必须先执行add。\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）如果修改分支下的已被追踪的文件，不管有没有对修改的文件进行add操作，如果执行stash，所有修改会被纳入保存的现场，而文件会恢复成修改前的状态。恢复现场后，文件又呈现被修改后的状态。 特别的是，如果修改的文件在stash前已经被add了，恢复现场后，暂存区的内容就会清空，相当于这个文件从未被add一样。\n")])])]),a("ul",[a("li",[t._v("19.设置Git UI颜色")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("让Git显示颜色，会让命令输出看起来更醒目\ngit config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ui "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("ul",[a("li",[t._v("20.忽略特殊文件")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("） 在Git工作区的根目录下创建一个特殊的 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore 文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。不需要从头写"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览： https"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("github"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gitignore\n忽略文件的原则是：\n忽略操作系统自动生成的文件，比如缩略图等；\n忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class文件；\n忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。\n比如一个完成的 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore文件，内容如下：\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n# Windows"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Thumbs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dbehthumbs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dbDesktop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ini\n\n# Python"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("cod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("so"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("egg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("egg"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("infodistbuild\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("） 把"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore也提交到Git\ngit add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore\ngit commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"there is a description"')]),t._v("\n就完成了！当然检验"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore的标准是git status命令是不是显示working tree clean。\n使用Windows的注意：如果在资源管理器里新建一个"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore文件，系统会非常弱智地提示必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore了。\n\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("）如果确实想要 添加已经被"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore忽略的文件，可以用"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f强制添加到Git\ngit add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class\n\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("）怀疑 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore写的有问题，需要查找哪个规则写错了，可以用git check"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ignore命令检查：\ngit check"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ignore "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v App"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("App"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class")]),t._v("\n表示"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("gitignore的第"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("行规则忽略了App"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("class这个文件，于是我们就可以知道应该修订哪个规则。\n")])])]),a("ul",[a("li",[t._v("21.为命令配置别名")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）命令可以简写，用git st表示git status，再比如用co表示checkout、ci表示commit、br表示branch：\ngit config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("co checkoutgit config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ci commitgit config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("br branch\n以后提交就可以简写成：\ngit ci "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"there is a description"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。\n\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）命令git reset "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("可以 撤销暂存区的修改（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：\ngit config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unstage "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'reset HEAD'")]),t._v("\n就可以简化命令：\ngit unstage test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" git reset "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\n\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("）配置一个git last，让其 显示最后一次提交信息：\ngit config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("last "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'log -1'")]),t._v("\n这样，用git last就能显示最近一次的提交：\ngit lastcommit "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("015851")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cbe2902bf01fbba198af5d6705dc0e03ac")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" dev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAuthor"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" xxx@foxmail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Mon Apr "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("52")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("44")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2018")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0800")]),t._v("\nadd git ignore list\n\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("）还有把lg配置成了：\ngit config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lg "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"")]),t._v("\n来看看 git lg的效果：\n")])])]),a("ul",[a("li",[t._v("22.修改配置文件")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("配置Git的时候，加上"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。\n每个仓库的Git配置文件都放在"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("config文件中：\ncat "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("config\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nrepositoryformatversion "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nfilemode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nbare "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nlogallrefupdates "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nsymlinks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nignorecase "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"master"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dev"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"github"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nurl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" git@github"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("LearnGit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\nfetch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("refs"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("heads"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*:refs/remotes/github/*\n[remote \"gitee\"]\nurl = git@gitee.com: xxx/LearnGit.git\nfetch = +refs/heads/*:refs/remotes/gitee/*\n-----------------------------------------------------------------------------\n\n而当前用户的Git配置文件放在 用户主目录下的一个隐藏文件.gitconfig中：\n-----------------------------------------------------------------------------\n[user]\nname = xxx\nemail = xxx@foxmail.com\n[gpg]\nprogram = C:\\\\Program Files (x86)\\\\gnupg\\\\bin\\\\gpg.exe\n[color]\nui = true\n[alias]\nco = checkout\nci = commit\nbr = branch\nlast = log -1\nlg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\n-----------------------------------------------------------------------------\n别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。\n\n多人协作的工作模式通常如下：\n（1）首先 将远程仓库克隆为本地仓库\ngit clone git@github.com: xxx /LearnGit.git\n（2）在本地创建和远程分支对应的分支\ngit checkout -b <本地分支名> origin/<远程分支名>\n本地和远程分支的名称最好一致；\n（3）在本地分支完成任务后，可以试图用 git push <远程主机名> <本地分支名>推送自己的修改；\n（2）如果推送失败，则表明远程分支比本地更新，需要先用 git pull试图合并；\n（3）如果pull失败并提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令 git branch --set-upstream-to=<远程主机名>/<远程分支名>  <本地分支名>创建链接；\n（4）如果合并有冲突，则解决冲突，并在本地提交（add => commit）；\n（5）没有冲突或者解决掉冲突后，再用 git push <远程主机名> <本地分支名>推送就能成功。\n")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);